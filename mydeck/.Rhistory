marginMappings <- 1:column_amount
names(marginMappings) <-colnames(data)
data[,colnames(data)] <- lapply(data[,colnames(data)] , factor)
colNams <- colnames(data)
factorsTrainingData <- lapply(data,levels)
# get the value mappings (in each element of the list, there is a list of values and the position is the id)
valueMappings <- lapply(data,levels)
# data in mapped numeric values
data_numeric <- sapply(data , as.numeric)
#number of separate values in each column
marginDims <- sapply(valueMappings,length)
#number of iterations in estimation
nIter <- 5
#divide into test and train data sets
trainSample <-which(runif(sample_amount, 0,1)<0.5)
trainData <- data_numeric[trainSample,]
testData <- data_numeric[-trainSample,]
#create sequence of samples (first one has start:272, secodn 1:333, etc)
seq <- rep(0,1000)
for (i in 1:length(seq)){
seq[i] <- ceiling( exp((i-1)/5 + 1)*100);
}
dataSeq <- vector("list",length(seq))
for(i in 1:length(seq)){
dataSeq[[i]] <- trainData[1:min(length(trainData[,1]),seq[i]),]
if(length(trainData[,1])<=seq[i]){
dataSeq<-dataSeq[1:i]
break
}
}
testLikelyhoods <- rep(0,length(dataSeq))
trainLikelyhoods <- rep(0,length(dataSeq))
atypicSim <- atypicalitySimulation(marginDims)
#take first sample
firstSample <- dataSeq[[1]]
usedData <- firstSample
atypicSim <- sampleK(firstSample, atypicSim)
atypicSim$etas <- mapEtas(atypicSim)
atypicSim <- bestInit(atypicSim, firstSample,testData,1)
testLikelyhoods[1] <- samplePosteriorLogLikelyhood(testData, atypicSim)
trainLikelyhoods[1] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
bestSim <- atypicSim
for( i in 2:length(dataSeq)){
#   atypicSim <- sampleK(dataSeq[[i]],atypicSim)
#  atypicSim$alpha <- sampleAlpha(atypicSim)
# atypicSim$etas <- sampleEtas(atypicSim)
#  usedData <- rbind(usedData,dataSeq[[i]])
#  testLikelyhoods[i] <- samplePosteriorLogLikelyhood(testData, atypicSim)
#  trainLikelyhoods[i] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
}
mainModel <- atypicSim
marginalModel <- atypicalityMarginalModel(atypicSim)
save(file = file.path(modelFolder,paste("modelId-", modelId,".R",sep="")), marginalModel, mainModel, colNams, factorsTrainingData)
}
applyModel<-function(data,idColumn, modelId,modelFolder, mainModel, marginalModel){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
data <- data[,colNams]
# data[,colnames(data)] <- lapply(data[,colnames(data)], factor)
# put levels in th e right order
for(i in 1:length(colNams)){
trainingLevels <- factorsTrainingData[[i]]
newLevels <- c(trainingLevels,setdiff(unique(data[,i]),trainingLevels))
data[,i] <- factor(data[,i],newLevels)
}
# data in mapped numeric values
data_numeric <- sapply(data, as.numeric)
ids <- row.names(data)
pcomps <- apply(data_numeric,1,componentPosteriors, mainModel)
#marginal component probabilities
mpcomps <- apply(data_numeric,1,componentPosteriors, marginalModel)
#likelihoods
samplePosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, mainModel)
sampleMarginPosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, marginalModel)
save(file = paste(modelFolder,"/modelId-", modelId,"-predictions.R",sep=""), pcomps, mpcomps, samplePosteriorLlh, sampleMarginPosteriorLlh, ids)
}
fitModel(data,1,modelId,"C:/Users/cpt2kil/Desktop/atypic")
# data matrix with one sample in a row, id:s in the idColumn
# modelId is the modelId under which one should store the model
# modelFolder is the (absolute) path to  folder  under which to save the results
fitModel<-function(data,idColumn,modelId, modelFolder, omitColumnNALevel=0){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
sample_amount<-dim(data)[1]
column_amount<-dim(data)[2]
#remove columns with just na:s
na_columns <- which(apply(data,2,function(x) length(which(is.na(x))))==sample_amount)
if(length(na_columns)>0){
data <- data[,-na_columns]
}
#remove columns that are duplicates
duplicated_columns <- which(duplicated(t((data))))
if(length(duplicated_columns>0)){
data <- data[,-duplicated_columns]
}
if(omitColumnNALevel>0){
include <- which(apply(data,2,function(x) length(which(x!=""))/length(x))>omitColumnNALevel)
data <- data[,include]
}
#get the marginMappings (columnName -> id)
marginMappings <- 1:column_amount
names(marginMappings) <-colnames(data)
data[,colnames(data)] <- lapply(data[,colnames(data)] , factor)
colNams <- colnames(data)
factorsTrainingData <- lapply(data,levels)
# get the value mappings (in each element of the list, there is a list of values and the position is the id)
valueMappings <- lapply(data,levels)
# data in mapped numeric values
data_numeric <- sapply(data , as.numeric)
#number of separate values in each column
marginDims <- sapply(valueMappings,length)
#number of iterations in estimation
nIter <- 5
#divide into test and train data sets
trainSample <-which(runif(sample_amount, 0,1)<0.5)
trainData <- data_numeric[trainSample,]
testData <- data_numeric[-trainSample,]
#create sequence of samples (first one has start:272, secodn 1:333, etc)
seq <- rep(0,1000)
for (i in 1:length(seq)){
seq[i] <- ceiling( exp((i-1)/5 + 1)*100);
}
dataSeq <- vector("list",length(seq))
for(i in 1:length(seq)){
dataSeq[[i]] <- trainData[1:min(length(trainData[,1]),seq[i]),]
if(length(trainData[,1])<=seq[i]){
dataSeq<-dataSeq[1:i]
break
}
}
testLikelyhoods <- rep(0,length(dataSeq))
trainLikelyhoods <- rep(0,length(dataSeq))
atypicSim <- atypicalitySimulation(marginDims)
#take first sample
firstSample <- dataSeq[[1]]
usedData <- firstSample
atypicSim <- sampleK(firstSample, atypicSim)
atypicSim$etas <- mapEtas(atypicSim)
atypicSim <- bestInit(atypicSim, firstSample,testData,1)
testLikelyhoods[1] <- samplePosteriorLogLikelyhood(testData, atypicSim)
trainLikelyhoods[1] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
bestSim <- atypicSim
for( i in 2:length(dataSeq)){
atypicSim <- sampleK(dataSeq[[i]],atypicSim)
atypicSim$alpha <- sampleAlpha(atypicSim)
atypicSim$etas <- sampleEtas(atypicSim)
usedData <- rbind(usedData,dataSeq[[i]])
testLikelyhoods[i] <- samplePosteriorLogLikelyhood(testData, atypicSim)
trainLikelyhoods[i] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
}
mainModel <- atypicSim
marginalModel <- atypicalityMarginalModel(atypicSim)
save(file = file.path(modelFolder,paste("modelId-", modelId,".R",sep="")), marginalModel, mainModel, colNams, factorsTrainingData)
}
applyModel<-function(data,idColumn, modelId,modelFolder, mainModel, marginalModel){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
data <- data[,colNams]
# data[,colnames(data)] <- lapply(data[,colnames(data)], factor)
# put levels in th e right order
for(i in 1:length(colNams)){
trainingLevels <- factorsTrainingData[[i]]
newLevels <- c(trainingLevels,setdiff(unique(data[,i]),trainingLevels))
data[,i] <- factor(data[,i],newLevels)
}
# data in mapped numeric values
data_numeric <- sapply(data, as.numeric)
ids <- row.names(data)
pcomps <- apply(data_numeric,1,componentPosteriors, mainModel)
#marginal component probabilities
mpcomps <- apply(data_numeric,1,componentPosteriors, marginalModel)
#likelihoods
samplePosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, mainModel)
sampleMarginPosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, marginalModel)
save(file = paste(modelFolder,"/modelId-", modelId,"-predictions.R",sep=""), pcomps, mpcomps, samplePosteriorLlh, sampleMarginPosteriorLlh, ids)
}
fitModel(data,1,modelId,"C:/Users/cpt2kil/Desktop/atypic")
load("C:/Users/cpt2kil/Desktop/atypic/modelId-2.R")
applyModel(data,1,2,"C:/Users/cpt2kil/Desktop/atypic", mainModel, marginalModel)
data[1:10,1]="test1"
data[11:21,1]="test2"
applyModel(data,1,2,"C:/Users/cpt2kil/Desktop/atypic", mainModel, marginalModel)
dim(data)
data[,1]
data[1,]
include
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
data_columns <- read.delim("../../../git/bda/backend-analytics/template-model-csvs/atypicality_template_model.csv", sep=";", header=TRUE)
colnames(data)=c("",as.character(data_columns[,1]),"empty")
include <- which(apply(data,2,function(x) length(which(x!=""))/length(x))>0.22)
data <- data[,include]
modelId <- 2
modelFolder <- "C:/Users/cpt2kil/Desktop/atypic"
fitModel(data,1,modelId,"C:/Users/cpt2kil/Desktop/atypic")
applyModel<-function(data,idColumn, modelId,modelFolder, mainModel, marginalModel, mainModel, marginalModel, colNams, factorsTrainingData){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
data <- data[,colNams]
# data[,colnames(data)] <- lapply(data[,colnames(data)], factor)
# put levels in th e right order
for(i in 1:length(colNams)){
trainingLevels <- factorsTrainingData[[i]]
newLevels <- c(trainingLevels,setdiff(unique(data[,i]),trainingLevels))
data[,i] <- factor(data[,i],newLevels)
}
# data in mapped numeric values
data_numeric <- sapply(data, as.numeric)
ids <- row.names(data)
pcomps <- apply(data_numeric,1,componentPosteriors, mainModel)
#marginal component probabilities
mpcomps <- apply(data_numeric,1,componentPosteriors, marginalModel)
#likelihoods
samplePosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, mainModel)
sampleMarginPosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, marginalModel)
save(file = paste(modelFolder,"/modelId-", modelId,"-predictions.R",sep=""), pcomps, mpcomps, samplePosteriorLlh, sampleMarginPosteriorLlh, ids)
}
applyModel<-function(data,idColumn, modelId,modelFolder, mainModel, marginalModel,colNams, factorsTrainingData){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
data <- data[,colNams]
# data[,colnames(data)] <- lapply(data[,colnames(data)], factor)
# put levels in th e right order
for(i in 1:length(colNams)){
trainingLevels <- factorsTrainingData[[i]]
newLevels <- c(trainingLevels,setdiff(unique(data[,i]),trainingLevels))
data[,i] <- factor(data[,i],newLevels)
}
# data in mapped numeric values
data_numeric <- sapply(data, as.numeric)
ids <- row.names(data)
pcomps <- apply(data_numeric,1,componentPosteriors, mainModel)
#marginal component probabilities
mpcomps <- apply(data_numeric,1,componentPosteriors, marginalModel)
#likelihoods
samplePosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, mainModel)
sampleMarginPosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, marginalModel)
save(file = paste(modelFolder,"/modelId-", modelId,"-predictions.R",sep=""), pcomps, mpcomps, samplePosteriorLlh, sampleMarginPosteriorLlh, ids)
}
applyModel(data,1,2,"C:/Users/cpt2kil/Desktop/atypic", mainModel, marginalModel, colNams, factorsTrainingData)
ls()
list.files()
getwd()
setwd("atypic/")
list.files()
load("modelId-2-predictions.R")
ls()
samplePosteriorLlh
sampleMarginPosteriorLlh
samplePosteriorLogLikelyhood
samplePosteriorLlh
mpcomps
mpcomps[,2]
mpcomps[2,]
pcomps[1:10,]
dim(pcomps)
pcomps[1,1:10]
pcomps[,1:10]
max(pcomps[1,1:10])
max(pcomps[2,1:10])
max(pcomps[3,1:10])
max(pcomps[4,1:10])
max(pcomps[5,1:10])
max(pcomps[6,1:10])
max(pcomps[7,1:10])
max(pcomps[8,1:10])
max(pcomps[9,1:10])
max(pcomps[10,1:10])
max(pcomps[11,1:10])
max(pcomps[12,1:10])
max(pcomps[13,1:10])
mainModel$componentCounts
mainModel$componentCounts/sum(mainModel$componentCounts)
bar(mainModel$componentCounts)
barplot(mainModel$componentCounts)
apply(mpcomps,2,which.max)
hist(apply(mpcomps,2,which.max))
apply(pcomps,2,which.max)
hist(apply(pcomps,2,which.max))
f <- function(g) {
force(g)
result <- NULL
function(...) {
if (is.null(result)) {
result <<- g(...)
}
result
}
}
runif2 <- f(runif)
runif(1)
runif2(1)
runif2(1)
runif2(1)
result
f <- function(g) {
force(g)
result <- NULL
function(...) {
if (is.null(result)) {
result <<- g(...)
}
result
}
}
runif2 <- f(runif)
f <- function(g) {
force(g)
result <- NULL
function(...) {
if (is.null(result)) {
result <<- g(...)
print("1")
}
result
}
}
runif2 <- f(runif)
runif2(1)
runif2(1)
runif2(1)
f <- function(g) {
force(g)
result <- NULL
print(result)
function(...) {
if (is.null(result)) {
result <<- g(...)
print("1")
}
result
}
}
runif2 <- f(runif)
runif(1)
runif(1)
f <- function(g) {
# force(g)
result <- NULL
print(result)
function(...) {
if (is.null(result)) {
result <<- g(...)
print("1")
}
result
}
}
runif2 <- f(runif)
runif(1)
runif(1)
f <- function(g) {
# force(g)
result <- NULL
print(result)
function(...) {
print(result)
if (is.null(result)) {
result <<- g(...)
print("1")
}
result
}
}
runif2 <- f(runif)
runif(1)
runif(1)
f <- function(a, b) function(x) a * x + b
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs
fs[[1]]
fs[[1]](3)
fs[[2]](3)
fs <- Map(force(f), a = c(0, 1), b = c(0, 1))
fs[[2]](3)
fs[[21]](3)
fs[[1]](3)
fs <- Map(f, a = c(0, 1), b = c(0, 1))
f <- function(a, b) {force(a); force(b);function(x) a * x + b}
fs <- Map(f, a = c(0, 1), b = c(0, 1))
fs[[1]](3)
# data matrix with one sample in a row, id:s in the idColumn
# modelId is the modelId under which one should store the model
# modelFolder is the (absolute) path to  folder  under which to save the results
fitModel<-function(data,idColumn,modelId, modelFolder, omitColumnNALevel=0){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
sample_amount<-dim(data)[1]
column_amount<-dim(data)[2]
#remove columns with just na:s
na_columns <- which(apply(data,2,function(x) length(which(is.na(x))))==sample_amount)
if(length(na_columns)>0){
data <- data[,-na_columns]
}
#remove columns that are duplicates
duplicated_columns <- which(duplicated(t((data))))
if(length(duplicated_columns>0)){
data <- data[,-duplicated_columns]
}
if(omitColumnNALevel>0){
include <- which(apply(data,2,function(x) length(which(x!=""))/length(x))>omitColumnNALevel)
data <- data[,include]
}
#get the marginMappings (columnName -> id)
marginMappings <- 1:column_amount
names(marginMappings) <-colnames(data)
data[,colnames(data)] <- lapply(data[,colnames(data)] , factor)
colNams <- colnames(data)
print(colNams)
factorsTrainingData <- lapply(data,levels)
# get the value mappings (in each element of the list, there is a list of values and the position is the id)
valueMappings <- lapply(data,levels)
# data in mapped numeric values
data_numeric <- sapply(data , as.numeric)
#number of separate values in each column
marginDims <- sapply(valueMappings,length)
#number of iterations in estimation
nIter <- 5
#divide into test and train data sets
trainSample <-which(runif(sample_amount, 0,1)<0.5)
trainData <- data_numeric[trainSample,]
testData <- data_numeric[-trainSample,]
#create sequence of samples (first one has start:272, secodn 1:333, etc)
seq <- rep(0,1000)
for (i in 1:length(seq)){
seq[i] <- ceiling( exp((i-1)/5 + 1)*100);
}
dataSeq <- vector("list",length(seq))
for(i in 1:length(seq)){
dataSeq[[i]] <- trainData[1:min(length(trainData[,1]),seq[i]),]
if(length(trainData[,1])<=seq[i]){
dataSeq<-dataSeq[1:i]
break
}
}
testLikelyhoods <- rep(0,length(dataSeq))
trainLikelyhoods <- rep(0,length(dataSeq))
atypicSim <- atypicalitySimulation(marginDims)
#take first sample
firstSample <- dataSeq[[1]]
usedData <- firstSample
atypicSim <- sampleK(firstSample, atypicSim)
atypicSim$etas <- mapEtas(atypicSim)
atypicSim <- bestInit(atypicSim, firstSample,testData,1)
testLikelyhoods[1] <- samplePosteriorLogLikelyhood(testData, atypicSim)
trainLikelyhoods[1] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
bestSim <- atypicSim
for( i in 2:length(dataSeq)){
atypicSim <- sampleK(dataSeq[[i]],atypicSim)
atypicSim$alpha <- sampleAlpha(atypicSim)
atypicSim$etas <- sampleEtas(atypicSim)
usedData <- rbind(usedData,dataSeq[[i]])
testLikelyhoods[i] <- samplePosteriorLogLikelyhood(testData, atypicSim)
trainLikelyhoods[i] <- samplePosteriorLogLikelyhood(usedData, atypicSim)
}
mainModel <- atypicSim
marginalModel <- atypicalityMarginalModel(atypicSim)
save(file = file.path(modelFolder,paste("modelId-", modelId,".R",sep="")), marginalModel, mainModel, colNams, factorsTrainingData)
}
applyModel<-function(data,idColumn, modelId,modelFolder, mainModel, marginalModel,colNams, factorsTrainingData){
rownames(data) <- data[,idColumn]
data <- data[,-idColumn]
data <- data[,colNams]
# data[,colnames(data)] <- lapply(data[,colnames(data)], factor)
# put levels in th e right order
for(i in 1:length(colNams)){
trainingLevels <- factorsTrainingData[[i]]
newLevels <- c(trainingLevels,setdiff(unique(data[,i]),trainingLevels))
data[,i] <- factor(data[,i],newLevels)
}
# data in mapped numeric values
data_numeric <- sapply(data, as.numeric)
ids <- row.names(data)
pcomps <- apply(data_numeric,1,componentPosteriors, mainModel)
#marginal component probabilities
mpcomps <- apply(data_numeric,1,componentPosteriors, marginalModel)
#likelihoods
samplePosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, mainModel)
sampleMarginPosteriorLlh <- apply(data_numeric,1,samplePosteriorLogLikelyhood, marginalModel)
save(file = paste(modelFolder,"/modelId-", modelId,"-predictions.R",sep=""), pcomps, mpcomps, samplePosteriorLlh, sampleMarginPosteriorLlh, ids)
}
fitModel(data,15,modelId,"C:/Users/cpt2kil/Desktop/atypic", 0.2)
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
data_columns <- read.delim("../../../git/bda/backend-analytics/template-model-csvs/atypicality_template_model.csv", sep=";", header=TRUE)
colnames(data)=c("",as.character(data_columns[,1]),"empty")
fitModel(data,15,modelId,"C:/Users/cpt2kil/Desktop/atypic", 0.2)
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
data_columns <- read.delim("../../../git/bda/backend-analytics/template-model-csvs/atypicality_template_model.csv", sep=";", header=TRUE)
colnames(data)=c("",as.character(data_columns[,1]),"empty")
colnames(data)
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
getwd()
setwd("..")
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
data_columns <- read.delim("../../../git/bda/backend-analytics/template-model-csvs/atypicality_template_model.csv", sep=";", header=TRUE)
fitModel(data,15,modelId,"C:/Users/cpt2kil/Desktop/atypic", 0.2)
colnames(data)
data=read.csv(file="modelling_data_atypicality.csv", sep=",", header=FALSE, stringsAsFactors=FALSE)
data_columns <- read.delim("../../../git/bda/backend-analytics/template-model-csvs/atypicality_template_model.csv", sep=";", header=TRUE)
colnames(data)=c("",as.character(data_columns[,1]),"empty")
colnames(data)
modelId <- 2
modelFolder <- "C:/Users/cpt2kil/Desktop/atypic"
modelId <- 15
modelFolder <- "C:/Users/cpt2kil/Desktop/atypic"
fitModel(data,1,modelId,"C:/Users/cpt2kil/Desktop/atypic", 0.2)
install.packages("slidify")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("Kirsti Laurila")
author("mydeck")
